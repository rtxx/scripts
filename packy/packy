#!/bin/bash
#MIT License
#Copyright (c) [2021] [Rui Teixeira (rtxx)]
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#   BEWARE!
#   * There is alot of *badness* in this script, I made it for fun and to learn and to get used to bash.
#   Get's AUR pkgs.
#   More info at https://wiki.archlinux.org/title/Aurweb_RPC_interface
#   Functionality:
#   -> Search
#       By default, the search fetchs the AUR for the package.
#       -S can be used with the -f flag to narrow the search, it search for the specific field. check the wiki for more info
#       -S can also be used with -s (lowercase) and gets the top 10 results, can be more with the -r flag
#   -> Download
#       By default, it downloads the .tar.gz avaiable on the AUR. The location is : [rootdir] / [name of the package] / [ version of the package ]
#       if the -x flag is active, then it also extracts it and compiles it with makepkg on the same folder described above.
#       it shows the PKGBUILD and can also edit it before compile. it asks to install after it
#   -> Updates
#       the -U flag check for new updates on AUR. it does only that, just checks for the updates, it does not install them.
#       to install them, use the download flag above described. maybe in the future it will also auto download the update.

scriptName=$(basename $0)
# max results to show on search
export maxResults=10
# default download location
export downloadLocation=$(dirname "$0")
downloadLocation=${downloadLocation}"/pkgs"
# dafault pkgList temp file
export pkgList="/tmp/pkgList"

function printHelp {
cat << EOF

Usage: $scriptName -options [package]

Get's AUR packages. It can search, download and check for updates.
Uses AUR API. More info at https://wiki.archlinux.org/title/Aurweb_RPC_interface

Options:
  -h        show this help message and exit
  Search:
    -S      searchs for exact package
      -s      search for keyword and gets the $maxResults results, order by number of votes
      -r      max result on search, default is $maxResults
      -f      search with specific field. avaiable fields:
               "name" "name-desc" "maintainer" "depends" "makedepends" "optdepends" "checkdepends"
  Download:
    -D      download package
      -x      extract package when download is finished and compiles it with makepkg -s
  Update:
    -U      check for AUR packages updates

EOF
}

# color support, thanks https://gist.github.com/elucify/c7ccfee9f13b42f11f81
RESTORE=$(echo -en '\033[0m')
RED=$(echo -en '\033[00;31m')
GREEN=$(echo -en '\033[00;32m')
YELLOW=$(echo -en '\033[00;33m')
BLUE=$(echo -en '\033[00;34m')
MAGENTA=$(echo -en '\033[00;35m')
PURPLE=$(echo -en '\033[00;35m')
CYAN=$(echo -en '\033[00;36m')
LIGHTGRAY=$(echo -en '\033[00;37m')
LRED=$(echo -en '\033[01;31m')
LGREEN=$(echo -en '\033[01;32m')
LYELLOW=$(echo -en '\033[01;33m')
LBLUE=$(echo -en '\033[01;34m')
LMAGENTA=$(echo -en '\033[01;35m')
LPURPLE=$(echo -en '\033[01;35m')
LCYAN=$(echo -en '\033[01;36m')
WHITE=$(echo -en '\033[01;37m')
BOLD=$(echo -en '\033[1m')
UNDERLINE=$(echo -en '\033[4')

# check if dependencies are met
dependencies=("jq" "nano")
for pkg in ${dependencies[@]}; do
  checkDependency=$(pacman -Q $pkg)
  exitStatus=$?
  if [ "$exitStatus" -eq 1 ]; then
    echo ${BOLD}:: Error ! Please install $pkg ${RESTORE}
    exit 2
  fi
done

# if there is no argument, print help
if [[ -z "$1" ]]; then
  printHelp
  exit 0
fi

# clean temporary files on exit
if [[ -e "$pkgList" ]]; then
  trap "rm $pkgList" EXIT
fi

# works fine
#pkgString=""
#loops the argument string until is done
#while [[ $# -gt 0 ]]; do
#  key="$1"
#  case "$key" in
#    -h|--help) printHelp=1 ;;
#    -S|--search) shift; pkgString="$1" ; searchPkg=1 ;;
#    -D|--download) shift; pkgString="$1" ; downloadPkg=1 ;;
#    -U|--update) shift; pkgString="$1" ; updatePkg=1 ;;
#    -e|--exact) exactSearch=1 ;;
#    -f|--searchfield) shift; searchField="$1" ;;
#    -r|--maxresults) shift; maxResults="$1" ;;
#    -x|--extract) extractPkg=1 ;;
#    *) echo "${RED}::${RESTORE}${BOLD} Unknown option: '$key' (use -h for help)${RESTORE}" ; exit 2 ;;
#  esac
#  shift
#done

# trying to make my own argument parser
# can mix arguments like -Ss and -Dx
# will try to do long options too, like --search
# needs some testing
function error_arg () {
  echo "${RED}::${RESTORE}${BOLD} -$1 requires an argument (use -h for help)${RESTORE}"
}
while [[ $# -gt 0 ]]; do
  # detects if the 1st char is an hiffen
  detectArgChar="$(printf '%s' "$1" | cut -c1)"
  if [ "$detectArgChar" = - ]; then
    currentArgOptions=$1
    currentArgValue=$2
    totalCharString=(${#currentArgOptions})
    # start on '1' because its always '-'
    for ((i = 1 ; i < $totalCharString  ; i++)); do
      key=${currentArgOptions:$i:1}
      # compares if the currentArgOptions is the character from the case
      case "$key" in
        # help flag
        h) printHelp=1 ;;

        # search flags
        # exact search
        S)  if [[ -z "$currentArgValue" ]]; then error_arg "$key" ; exit 2
            else pkgString="$currentArgValue" ; searchPkg=1 ; exactSearch=1 ; fi ;;
        # normal search, search for keyword
        s)  exactSearch=0 ;;
            #if [[ -z "$currentArgValue" ]]; then echo error_arg "$key" ; exit 2
            #elif [[ -z "$searchPkg" ]]; then  echo "${RED}::${RESTORE}${BOLD} $1 requires -S flag (use -h for help)${RESTORE}" ; exit 2
            #else exactSearch=0 ; fi ;; #pkgString="$currentArgValue" ; searchPkg=1 ;
        # search with 'search field'
        f)  if [[ -z "$currentArgValue" ]]; then echo error_arg "$key" ; exit 2
            else searchField="$currentArgValue" ; fi ; ;;
        # get more results
        r)  if [[ -z "$currentArgValue" ]]; then echo error_arg "$key" ; exit 2
            else maxResults="$currentArgValue" ; fi ;;

        # download flags
        # download PKGBUILD
        D)  if [[ -z "$currentArgValue" ]]; then echo error_arg "$key" ; exit 2
            else pkgString="$currentArgValue" ; downloadPkg=1 ; fi ; ;;
        # download and make installation
        x)  if [[ -z "$downloadPkg" ]]; then  echo "${RED}::${RESTORE}${BOLD} $1 requires -D flag (use -h for help)${RESTORE}" ; exit 2
            else extractPkg=1 ; fi ; ;;

        # update flags
        # check for updates
        U)  updatePkg=1 ;;
        #e) exactSearch=1 ;;
        *) echo "${RED}::${RESTORE}${BOLD} Unknown option: '$key' (use -h for help)${RESTORE}" ; exit 2 ;;
      esac
    done
  #else
  #  echo "${RED}::${RESTORE}${BOLD} No operation specified (use -h for help)${RESTORE}"
  fi
  shift
done

# doesnt work
# if no argument is given then
#if [[  $# -eq 1 ]]; then
  # full aur package detail
#  echo ${BOLD}:: Search AUR for $1 ${RESTORE}
#  resultJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$1")
#  nResult=$(echo $resultJSON | jq -r '.resultcount')
#  if [[ "$nResult" -eq 0 ]]; then
#    echo ${BOLD}:: Exact search return 0 results. Try $scriptName -S $1 ${RESTORE}
#    exit 2
#  else
#    echo $resultJSON | jq -r '.results[] | "ID:\t\t\(.ID) \nName:\t\t\(.Name) \nPackageBaseID:\t\(.PackageBaseID) \nPackageBase:\t\(.PackageBase) \nVersion:\t\(.Version) \nDescription:\t\(.Description) \nURL:\t\t\(.URL) \nNumVotes:\t\(.NumVotes) \nPopularity:\t\(.Popularity) \nOutOfDate:\t\(.OutOfDate) \nMaintainer:\t\(.Maintainer) \nFirstSubmitted:\t\(.FirstSubmitted) \nLastModified:\t\(.LastModified) \nURLPath:\t\(.URLPath) \nDepends:\t\(.Depends) \nMakeDepends:\t\(.MakeDepends) \nOptDepends:\t\(.OptDepends) \nLicense:\t\(.License) \nKeywords:\t\(.Keywords) "'
#    exit 0
#  fi
#fi

if [ "$printHelp" ]; then
  printHelp
  exit 0
fi

# if search and download flag are present then errors out
if [[ "$searchPkg" &&  "$downloadPkg" ]]; then
  echo ${RED}::${RESTORE}${BOLD} Error: only one operation may be used at a time${RESTORE}
  exit 2
fi

# search package
if [ "$searchPkg" ]; then
  if [[ "$extractPkg" == "1" ]] ; then
    echo ${YELLOW}::${RESTORE}${BOLD} Ignore: -x does nothing with -S${RESTORE}
  fi
  # exact search
  # if exact search flag on section
  if [[ "$exactSearch" == "1" ]] ; then
    echo ::${BOLD} Search AUR for $pkgString ${RESTORE}
    if [ "$searchField" ]; then
      echo ${YELLOW}::${RESTORE}${BOLD} Ignore: -f does nothing with -S${RESTORE}
    fi
    donwloadJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$pkgString" -o $pkgList)
    resultJSON=$(cat $pkgList)
    nResult=$(echo $resultJSON | jq -r '.resultcount')
    # if it founds more than 1 pkg, errors, if not, outputs the pkg data
    if [[ "$nResult" -eq 0 ]]; then
      echo ${RED}::${RESTORE}${BOLD} Error: No results found. Try $scriptName -Ss $pkgString ${RESTORE}
      exit 2
    else
      firstSubmitted=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.FirstSubmitted)"'))
      lastModified=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.LastModified)"'))
      # check for out of date flag from AUR
      # if date doesnt trow an error then is out of date, else just outputs "no"
      outOfDate=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.OutOfDate)"') 2>&1)
      outOfDateExitStatus=$?
      if [ "$outOfDateExitStatus" == 0 ]; then
        outOfDate="${MAGENTA}Flagged out of date since $outOfDate ${RESTORE}"
      else
        outOfDate="no"
      fi
      # check if package got a maintainer, if its not orphan
      maintainer=$(echo $resultJSON | jq -jr '.results[] | "\(.Maintainer)"')
      if [ "$maintainer" == "null" ]; then
        maintainer="${BLUE}Package is orphan. ${RESTORE}"
      fi

      echo $resultJSON | jq -r '.results[] | "'${BOLD}'ID:'${RESTORE}'\t\t\(.ID) \n'${BOLD}'Name:'${RESTORE}'\t\t\(.Name) \n'${BOLD}'PackageBaseID:'${RESTORE}'\t\(.PackageBaseID) \n'${BOLD}'PackageBase:'${RESTORE}'\t\(.PackageBase) \n'${BOLD}'Version:'${RESTORE}'\t\(.Version) \n'${BOLD}'Description:'${RESTORE}'\t\(.Description) \n'${BOLD}'URL:'${RESTORE}'\t\t\(.URL) \n'${BOLD}'NumVotes:'${RESTORE}'\t\(.NumVotes) \n'${BOLD}'Popularity:'${RESTORE}'\t\(.Popularity) \n'${BOLD}'OutOfDate:'${RESTORE}'\t'"$outOfDate"' \n'${BOLD}'Maintainer:'${RESTORE}'\t'"$maintainer"' \n'${BOLD}'FirstSubmitted:'${RESTORE}'\t'"$firstSubmitted"' \n'${BOLD}'LastModified:'${RESTORE}'\t'"$lastModified"' \n'${BOLD}'URLPath:'${RESTORE}'\t\(.URLPath) \n'${BOLD}'Depends:'${RESTORE}'\t\(.Depends) \n'${BOLD}'MakeDepends:'${RESTORE}'\t\(.MakeDepends) \n'${BOLD}'OptDepends:'${RESTORE}'\t\(.OptDepends) \n'${BOLD}'License:'${RESTORE}'\t\(.License) \n'${BOLD}'Keywords:'${RESTORE}'\t\(.Keywords) "'
      exit 0
    fi
  fi

  # if searchField flag is on
  # checks if -f flag argument is valid, if not errors out
  if [ "$searchField" ]; then
    searchFieldOptions=("name" "name-desc" "maintainer" "depends" "makedepends" "optdepends" "checkdepends")
    for field in ${searchFieldOptions[@]}; do
      if [ "${field}" = "${searchField}" ]; then
        foundField=1
      fi
    done
    # if found search flag is on section
    if [ "$foundField" ]; then
      echo ::${BOLD} Search AUR for $pkgString with field "'$searchField'"${RESTORE}
      donwloadJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=$searchField&arg=$pkgString" -o $pkgList)
      resultJSON=$(cat $pkgList)
      nResult=$(echo $resultJSON | jq -r '.resultcount')
      # if there is no results
      if [[ "$nResult" -eq 0 ]]; then
        echo ${RED}::${RESTORE}${BOLD} Error: No results found ${RESTORE}
        exit 0
      fi
      # if there is less then 10 results then maxResults get the value of nResult
      if [[ "$nResult" -lt $maxResults ]]; then
        maxResults=$nResult
      fi
      echo ${GREEN}::${RESTORE}${BOLD} Found $nResult packages. ${RESTORE}
      # this is to sort by number of votes, meaning that probably the package needed is at the top
      resultJSON=$(cat $pkgList | jq -jr '.results | sort_by(.NumVotes) | reverse')
      printf "${BOLD}%-4s %-32s %-128s${RESTORE}\n" "[#]" "Package Name" "Description" | sed 's/^/   /'
      for ((i = 0 ; i < $maxResults ; i++)); do
        name=$(echo $resultJSON | jq -jr '.['$i'] | "\(.Name)"')
        description=$(echo $resultJSON | jq -jr '.['$i'] | "\(.Description)"')
        printf "%-4s ${BOLD}%-32s${RESTORE} %-128s\n" "[$i]" "$name" "$description" | sed 's/^/   /'
      done
      # if it founds more than the maxResults variable, then it only outputs until the value
      if [[ "$nResult" -gt $maxResults ]]; then
        echo ::${BOLD} Showing $maxResults results. Use -r to change it. ${RESTORE}
      fi
      exit 0
    else
      echo ${RED}::${RESTORE}${BOLD} Error: Search field "'$searchField'" is not valid. Valid options: ${RESTORE}
      echo ${RED}"   -->"${RESTORE}${BOLD} ${searchFieldOptions[*]} ${RESTORE}
      exit 2
    fi
  fi

  # normal search
  echo ::${BOLD} Search AUR for $pkgString${RESTORE}
  donwloadJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$pkgString" -o $pkgList)
  resultJSON=$(cat $pkgList)
  nResult=$(echo $resultJSON | jq -r '.resultcount')

  # if there is no results
  if [[ "$nResult" -eq 0 ]]; then
    echo ${RED}::${RESTORE}${BOLD} Error: No results found ${RESTORE}
    exit 0
  fi

  # if there is 1 result then assume its the correct one and show all the details
  if [[ "$nResult" -eq 1 ]]; then
    donwloadJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$pkgString" -o $pkgList)
    resultJSON=$(cat $pkgList)
    firstSubmitted=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.FirstSubmitted)"'))
    lastModified=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.LastModified)"'))
    # check for out of date flag from AUR
    # if date doesnt trow an error then is out of date, else just outputs "no"
    outOfDate=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.OutOfDate)"') 2>&1)
    outOfDateExitStatus=$?
    if [ "$outOfDateExitStatus" == 0 ]; then
      outOfDate="${MAGENTA}Flagged out of date since $outOfDate ${RESTORE}"
    else
      outOfDate="no"
    fi
    # check if package got a maintainer, if its not orphan
    maintainer=$(echo $resultJSON | jq -jr '.results[] | "\(.Maintainer)"')
    if [ "$maintainer" == "null" ]; then
      maintainer="${BLUE}Package is orphan. ${RESTORE}"
    fi

    echo $resultJSON | jq -r '.results[] | "'${BOLD}'ID:'${RESTORE}'\t\t\(.ID) \n'${BOLD}'Name:'${RESTORE}'\t\t\(.Name) \n'${BOLD}'PackageBaseID:'${RESTORE}'\t\(.PackageBaseID) \n'${BOLD}'PackageBase:'${RESTORE}'\t\(.PackageBase) \n'${BOLD}'Version:'${RESTORE}'\t\(.Version) \n'${BOLD}'Description:'${RESTORE}'\t\(.Description) \n'${BOLD}'URL:'${RESTORE}'\t\t\(.URL) \n'${BOLD}'NumVotes:'${RESTORE}'\t\(.NumVotes) \n'${BOLD}'Popularity:'${RESTORE}'\t\(.Popularity) \n'${BOLD}'OutOfDate:'${RESTORE}'\t'"$outOfDate"' \n'${BOLD}'Maintainer:'${RESTORE}'\t'"$maintainer"' \n'${BOLD}'FirstSubmitted:'${RESTORE}'\t'"$firstSubmitted"' \n'${BOLD}'LastModified:'${RESTORE}'\t'"$lastModified"' \n'${BOLD}'URLPath:'${RESTORE}'\t\(.URLPath) \n'${BOLD}'Depends:'${RESTORE}'\t\(.Depends) \n'${BOLD}'MakeDepends:'${RESTORE}'\t\(.MakeDepends) \n'${BOLD}'OptDepends:'${RESTORE}'\t\(.OptDepends) \n'${BOLD}'License:'${RESTORE}'\t\(.License) \n'${BOLD}'Keywords:'${RESTORE}'\t\(.Keywords) "'
    exit 0
  fi

  # if there is less then 10 results then maxResults get the value of nResult
  if [[ "$nResult" -lt $maxResults ]]; then
    maxResults=$nResult
  fi
  echo ${GREEN}::${RESTORE}${BOLD} Found $nResult packages. ${RESTORE}
  # this is to sort by number of votes, meaning that probably the package needed is at the top
  resultJSON=$(cat $pkgList | jq -jr '.results | sort_by(.NumVotes) | reverse')
  printf "${BOLD}%-4s %-32s %-128s${RESTORE}\n" "[#]" "Package Name" "Description" | sed 's/^/   /'
  for ((i = 0 ; i < $maxResults ; i++)); do
    name=$(echo $resultJSON | jq -jr '.['$i'] | "\(.Name)"')
    description=$(echo $resultJSON | jq -jr '.['$i'] | "\(.Description)"')
    printf "%-4s ${BOLD}%-32s${RESTORE} %-128s\n" "[$i]" "$name" "$description" | sed 's/^/   /'
  done

  if [[ "$nResult" -gt $maxResults ]]; then
    echo ::${BOLD} Showing $maxResults results. Use -r to change it. ${RESTORE}
  fi
  exit 0
fi

# download package
# downloads the package, creates a folder with the pkg version
# if -x is on, extracts to it and compiles with makepkg
if [ "$downloadPkg" ]; then
  if [[ "$exactSearch" ]] ; then
    echo ${YELLOW}::${RESTORE}${BOLD} Ignore: -s does nothing with -D flag${RESTORE}
  fi
  if [ "$searchField" ]; then
    echo ${YELLOW}::${RESTORE}${BOLD} Ignore: -f does nothing with -D flag ${RESTORE}
  fi
  resultJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$pkgString")
  nResult=$(echo $resultJSON | jq -r '.resultcount')
  if [[ "$nResult" -eq 1 ]]; then
    echo ${GREEN}::${RESTORE}${BOLD} Found $pkgString, downloading...${RESTORE}
    firstSubmitted=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.FirstSubmitted)"'))
    lastModified=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.LastModified)"'))
    echo $resultJSON | jq -r '.results[] | "'${BOLD}'ID:'${RESTORE}'\t\t\(.ID) \n'${BOLD}'Name:'${RESTORE}'\t\t\(.Name) \n'${BOLD}'PackageBaseID:'${RESTORE}'\t\(.PackageBaseID) \n'${BOLD}'PackageBase:'${RESTORE}'\t\(.PackageBase) \n'${BOLD}'Version:'${RESTORE}'\t\(.Version) \n'${BOLD}'Description:'${RESTORE}'\t\(.Description) \n'${BOLD}'URL:'${RESTORE}'\t\t\(.URL) \n'${BOLD}'NumVotes:'${RESTORE}'\t\(.NumVotes) \n'${BOLD}'Popularity:'${RESTORE}'\t\(.Popularity) \n'${BOLD}'OutOfDate:'${RESTORE}'\t\(.OutOfDate) \n'${BOLD}'Maintainer:'${RESTORE}'\t\(.Maintainer) \n'${BOLD}'FirstSubmitted:'${RESTORE}'\t'"$firstSubmitted"' \n'${BOLD}'LastModified:'${RESTORE}'\t'"$lastModified"' \n'${BOLD}'URLPath:'${RESTORE}'\t\(.URLPath) \n'${BOLD}'Depends:'${RESTORE}'\t\(.Depends) \n'${BOLD}'MakeDepends:'${RESTORE}'\t\(.MakeDepends) \n'${BOLD}'OptDepends:'${RESTORE}'\t\(.OptDepends) \n'${BOLD}'License:'${RESTORE}'\t\(.License) \n'${BOLD}'Keywords:'${RESTORE}'\t\(.Keywords) "'

    echo ::${BOLD} Checking for make dependencies...${RESTORE}
    makeDepends=$(echo $resultJSON | jq -jr '.results[] | "\(.MakeDepends[]) "')
    checkInstalledPkgs=$(pacman -Q $makeDepends)
    checkInstalledPkgsExitStatus=$?
    if [ "$checkInstalledPkgsExitStatus" -eq 0 ]; then
      echo ${GREEN}::${RESTORE}${BOLD} All make dependencies are present${RESTORE}
    else
      echo ${RED}::${RESTORE}${BOLD} Warning! Some dependencies needed for compiling are missing${RESTORE}
      echo ${RED}::${RESTORE}${BOLD} makepkg maybe can install them, if not, manually install them${RESTORE}
    fi

    # gets name for pkg directory
    pkgVersion=$(echo $resultJSON | jq -r  .results[0].Version)
    pkgLocation=$downloadLocation/$pkgString/$pkgVersion
    mkdir -p $pkgLocation

    # downloads the package and puts it on the correct dir
    urlPath=$(echo $resultJSON | jq -r  .results[0].URLPath)
    curlURL=$(curl "https://aur.archlinux.org$urlPath" -o "$pkgLocation/$pkgString.tar.gz")
    curlURLExitStatus=$?
    # if donwload is a sucess
    if [ "$curlURLExitStatus" -eq 0 ]; then
      echo ${GREEN}::${RESTORE}${BOLD} Downloaded $pkgString to $pkgLocation ${RESTORE}
      # if -x flag is on then
      if [ "$extractPkg" == "1" ]; then
        # sets pkg tar location
        pkgTarLocation=$pkgLocation/$pkgString.tar.gz
        echo ::${BOLD} Extracting $pkgString to $pkgLocation ${RESTORE}
        # extracts the pkg tar to the correct dir
        tar -xvf $pkgTarLocation -C $pkgLocation --strip-components=1 | sed 's/^/   /'
        echo ${GREEN}::${RESTORE}${BOLD} Extracted $pkgString to $pkgLocation  ${RESTORE}
        # shows PKGBUILD
        #echo ${BOLD}:: Viewing $pkgString PKGBUILD ${RESTORE}
        #less $pkgLocation/PKGBUILD
        # asks for some options, view edit, and if we proceed or not
        whileString="::${BOLD} Continue with install? yes no ${RESTORE}[${BOLD}v${RESTORE}]iew PKGBUILD [${BOLD}e${RESTORE}]dit : ${RESTORE}"
        printf "$whileString"
        while read key; do
          case "$key" in
            y|yes) break ;;
            n|no) printf "${RED}::${RESTORE}${BOLD} Exiting...\n${RESTORE}" ; exit 0 ;;
            v|view) less $pkgLocation/PKGBUILD ;  printf "$whileString" ;;
            e|edit) nano $pkgLocation/PKGBUILD ;  printf "$whileString" ;;
            *) printf "${RED}::${RESTORE} Error: Unknown option '$key'.${RESTORE}\n" ; printf "$whileString" ;;
          esac
        done
        echo ${GREEN}::${RESTORE}${BOLD} Started compiling with makepkg ${RESTORE}
        cd $pkgLocation
        # need some work here, to get the makepkg error but still output its progress
        # makepkg with -s (build package) and -c (clean after sucessful build)
        makepkg -sc
        makePkgExitStatus=$?
        # check if package is already built
        if [ "$makePkgExitStatus" -eq 13 ]; then
          whileString="${YELLOW}::${RESTORE} ${BOLD} Package '$pkgString' is already built. Continue? [yes] [no] : ${RESTORE}"
          printf "$whileString"
          while read key; do
            case "$key" in
              # if yes then continues the installation
              y|yes) continueInstall=1; break ;;
              n|no) echo "${BOLD}:: Exiting... ${RESTORE}" ; exit 2 ;;
              *) printf "${RED}::${RESTORE} Error: Unknown option '$key'.${RESTORE}\n" ; printf "$whileString" ;;
            esac
          done
        fi
        # check is makepkg compile sucessfully
        if [[ "$makePkgExitStatus" -eq 0 || "$continueInstall" ]]; then
          compilePkg=$(ls $pkgLocation/*.pkg.tar.zst)
          echo ::${BOLD} makepkg complete.${RESTORE}
          if [[ -e "$compilePkg" ]]; then
            whileString="${BOLD}:: Install $pkgString? [yes] [no] : ${RESTORE}"
            printf "$whileString"
            while read key; do
              case "$key" in
                y|yes) printf "::${BOLD} Requesting root privilege  \n${RESTORE}" ; sudo pacman -U $compilePkg ; break ;;
                n|no) printf "::${BOLD} Use pacman -U $compilePkg to complete the install\n${RESTORE}" ; exit 0 ;;
                *) printf "${RED}::${RESTORE} Error: Unknown option '$key'.${RESTORE}\n" ; printf "$whileString" ;;
              esac
            done
          fi
          exit 0
        else
          echo
          echo ${RED}::${RESTORE}${BOLD} makepkg complete but with errors! ${RESTORE}
          echo ${RED}::${RESTORE}${BOLD} Check for makepkg errors above ${RESTORE}
          exit 2
        fi
      fi
      exit 0
    else
      echo ${RED}::${RESTORE}${BOLD} Error: Something went wrong
      exit 2
    fi
  else
  echo ${RED}::${RESTORE}${BOLD} Error: Please be more specific, $nResult packages found${RESTORE}
  exit 2
  fi
fi

if [ "$updatePkg" == "1" ]; then
  if [[ "$exactSearch" == "1" ]] ; then
    echo ${YELLOW}::${RESTORE}${BOLD} Ignore: -s does nothing with -U flag${RESTORE}
  fi
  if [ "$searchField" == "1" ]; then
    echo ${YELLOW}::${RESTORE}${BOLD} Ignore: -f does nothing with -U flag${RESTORE}
  fi
  echo ::${BOLD} Checking for AUR updates, please wait... ${RESTORE}
  #echo ${BOLD}:: "Attention! This will check for all foreign packages (typically manually downloaded and installed or packages removed from the repositories)" ${RESTORE}

  # gets the number of foreign packages installed on the system
  nInstalledPkgs=$(pacman -Qm | wc -l)
  # gets the names of the foreign installed packages and puts it on an array
  pkgNameA=( $(pacman -Qm | awk '{print $1}') )
  # same for the packages versions
  pkgVrsA=( $(pacman -Qm | awk '{print $2}') )

  # then loops until the number of installed foreign packages and compares the versions with the AUR
  for ((i = 0 ; i < $nInstalledPkgs  ; i++)); do
    # gets AUR package info
    resultJSON=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=${pkgNameA[$i]}")
    # gets its name
    name=$(echo $resultJSON | jq -jr '.results[] |"\(.Name)"')
    # and version
    ver=$(echo $resultJSON | jq -jr '.results[] |"\(.Version)"')

    # and does the following
    # it compares the two versions, the online and the current installed on the system and sorts it
    # the first result is always the the highest version
    # so if we compare it to the local version and its true, then theres is no new update
    # if its not the same, then we now we a have a new update
    checkV=$(printf '%s\n' "${pkgVrsA[$i]}" "$ver" | sort -V | sed -n 1p)
    if [[ "$checkV" != "$ver" ]]; then
      # comment this out to get less text showing, and change above if to '==,' and comment out 'else' too
      #echo :: ${pkgNameA[$i]} is up to date.
    #else
      echo ${GREEN}::${RESTORE} ${BOLD}${pkgNameA[$i]}${RESTORE}
      echo ${GREEN} "Update avaiable:" ${pkgVrsA[$i]} "==>" $ver${RESTORE} | sed 's/^/ -->/'
      newUpdate+=(${pkgNameA[$i]})
    fi

    # if date doesnt trow an error then is out of date
    # then, if its true adds it to an array
    outOfDate=$(date -d @$(echo $resultJSON | jq -jr '.results[] | "\(.OutOfDate)"') 2>&1)
    outOfDateExitStatus=$?
    if [ "$outOfDateExitStatus" == 0 ]; then
      outOfDate="${MAGENTA}::${RESTORE} ${BOLD}${pkgNameA[$i]} ${RESTORE}\n -->${MAGENTA}   Flagged out of date since $outOfDate ${RESTORE}"
      echo -e $outOfDate #| sed 's/^/   /'
      outOfDateA+=(${pkgNameA[$i]})
    fi

    # check if package got a maintainer, if its not orphan
    maintainer=$(echo $resultJSON | jq -jr '.results[] | "\(.Maintainer)"')
    if [ "$maintainer" == "null" ]; then
      maintainer="${BLUE}::${RESTORE} ${BOLD}${pkgNameA[$i]} ${RESTORE}\n -->${BLUE}   Package is orphan ${RESTORE}"
      echo -e $maintainer #| sed 's/^/   /'
      maintainerA+=(${pkgNameA[$i]})
    fi
  done

  # prints the packages that have an update avaiable
  if [[ ${#newUpdate[@]} -gt 0 ]]; then
    echo ${GREEN}::${RESTORE}${BOLD} Updates avaiable for: ${RESTORE}
    for i in "${newUpdate[@]}"; do
      echo ${GREEN}"==>"${RESTORE} ${BOLD}$i${RESTORE} | sed 's/^/   /'
    done
  else
    echo ::${BOLD} No updates avaiable ${RESTORE}
  fi
  # prints the packages that are out of date
  if [[ ${#outOfDateA[@]} -gt 0 ]]; then
    echo ${MAGENTA}::${RESTORE}${BOLD} Flagged out of date packages: ${RESTORE}
    for i in "${outOfDateA[@]}"; do
      echo ${MAGENTA}"==>"${RESTORE} ${BOLD}$i${RESTORE} | sed 's/^/   /'
    done
  fi
  # prints the packages that are orphan
  if [[ ${#maintainerA[@]} -gt 0 ]]; then
    echo ${BLUE}::${RESTORE}${BOLD} Orphan packages: ${RESTORE}
    for i in "${maintainerA[@]}"; do
      echo ${BLUE}"==>"${RESTORE} ${BOLD}$i${RESTORE} | sed 's/^/   /'
    done
  fi
  exit 0
fi
